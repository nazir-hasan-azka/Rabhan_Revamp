{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/env.ts"],"sourcesContent":["import { z } from 'zod';\n\n/**\n * Environment Variable Validation Schema\n * Ensures all required environment variables are present and valid\n */\nconst envSchema = z.object({\n  // Node Environment\n  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),\n\n  // Application\n  NEXT_PUBLIC_APP_URL: z.string().url().default('http://localhost:3000'),\n  NEXT_PUBLIC_APP_NAME: z.string().default('Rabhan Revamp'),\n  NEXT_PUBLIC_APP_DESCRIPTION: z.string().optional(),\n\n  // Database\n  DATABASE_URL: z.string().min(1),\n\n  // NextAuth\n  NEXTAUTH_URL: z.string().url(),\n  NEXTAUTH_SECRET: z.string().min(32),\n\n  // Security\n  ENCRYPTION_KEY: z.string().min(32),\n  JWT_SECRET: z.string().min(32),\n  JWT_EXPIRES_IN: z.string().default('15m'),\n  REFRESH_TOKEN_EXPIRES_IN: z.string().default('7d'),\n\n  // Rate Limiting\n  RATE_LIMIT_WINDOW: z.string().default('60000').transform(Number),\n  RATE_LIMIT_MAX_REQUESTS: z.string().default('1000').transform(Number),\n\n  // Optional Services\n  REDIS_URL: z.string().url().optional(),\n  REDIS_PASSWORD: z.string().optional(),\n\n  SENTRY_DSN: z.string().url().optional(),\n  NEXT_PUBLIC_GA_MEASUREMENT_ID: z.string().optional(),\n\n  // Feature Flags\n  NEXT_PUBLIC_ENABLE_PWA: z.string().default('true').transform((v) => v === 'true'),\n  NEXT_PUBLIC_ENABLE_ANALYTICS: z.string().default('false').transform((v) => v === 'true'),\n  NEXT_PUBLIC_ENABLE_ERROR_TRACKING: z\n    .string()\n    .default('false')\n    .transform((v) => v === 'true'),\n});\n\n/**\n * Validated and typed environment variables\n * @throws {Error} If environment variables are invalid\n */\nexport const env = envSchema.parse({\n  NODE_ENV: process.env.NODE_ENV,\n  NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n  NEXT_PUBLIC_APP_NAME: process.env.NEXT_PUBLIC_APP_NAME,\n  NEXT_PUBLIC_APP_DESCRIPTION: process.env.NEXT_PUBLIC_APP_DESCRIPTION,\n  DATABASE_URL: process.env.DATABASE_URL,\n  NEXTAUTH_URL: process.env.NEXTAUTH_URL,\n  NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,\n  ENCRYPTION_KEY: process.env.ENCRYPTION_KEY,\n  JWT_SECRET: process.env.JWT_SECRET,\n  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN,\n  REFRESH_TOKEN_EXPIRES_IN: process.env.REFRESH_TOKEN_EXPIRES_IN,\n  RATE_LIMIT_WINDOW: process.env.RATE_LIMIT_WINDOW,\n  RATE_LIMIT_MAX_REQUESTS: process.env.RATE_LIMIT_MAX_REQUESTS,\n  REDIS_URL: process.env.REDIS_URL,\n  REDIS_PASSWORD: process.env.REDIS_PASSWORD,\n  SENTRY_DSN: process.env.SENTRY_DSN,\n  NEXT_PUBLIC_GA_MEASUREMENT_ID: process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID,\n  NEXT_PUBLIC_ENABLE_PWA: process.env.NEXT_PUBLIC_ENABLE_PWA,\n  NEXT_PUBLIC_ENABLE_ANALYTICS: process.env.NEXT_PUBLIC_ENABLE_ANALYTICS,\n  NEXT_PUBLIC_ENABLE_ERROR_TRACKING: process.env.NEXT_PUBLIC_ENABLE_ERROR_TRACKING,\n});\n\n// Type-safe environment variables\nexport type Env = z.infer<typeof envSchema>;\n"],"names":[],"mappings":";;;;AAAA;;AAEA;;;CAGC,GACD,MAAM,YAAY,+KAAC,CAAC,MAAM,CAAC;IACzB,mBAAmB;IACnB,UAAU,+KAAC,CAAC,IAAI,CAAC;QAAC;QAAe;QAAQ;KAAa,EAAE,OAAO,CAAC;IAEhE,cAAc;IACd,qBAAqB,+KAAC,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC;IAC9C,sBAAsB,+KAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IACzC,6BAA6B,+KAAC,CAAC,MAAM,GAAG,QAAQ;IAEhD,WAAW;IACX,cAAc,+KAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAE7B,WAAW;IACX,cAAc,+KAAC,CAAC,MAAM,GAAG,GAAG;IAC5B,iBAAiB,+KAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAEhC,WAAW;IACX,gBAAgB,+KAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC/B,YAAY,+KAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC3B,gBAAgB,+KAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IACnC,0BAA0B,+KAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAE7C,gBAAgB;IAChB,mBAAmB,+KAAC,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,SAAS,CAAC;IACzD,yBAAyB,+KAAC,CAAC,MAAM,GAAG,OAAO,CAAC,QAAQ,SAAS,CAAC;IAE9D,oBAAoB;IACpB,WAAW,+KAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;IACpC,gBAAgB,+KAAC,CAAC,MAAM,GAAG,QAAQ;IAEnC,YAAY,+KAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;IACrC,+BAA+B,+KAAC,CAAC,MAAM,GAAG,QAAQ;IAElD,gBAAgB;IAChB,wBAAwB,+KAAC,CAAC,MAAM,GAAG,OAAO,CAAC,QAAQ,SAAS,CAAC,CAAC,IAAM,MAAM;IAC1E,8BAA8B,+KAAC,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,SAAS,CAAC,CAAC,IAAM,MAAM;IACjF,mCAAmC,+KAAC,CACjC,MAAM,GACN,OAAO,CAAC,SACR,SAAS,CAAC,CAAC,IAAM,MAAM;AAC5B;AAMO,MAAM,MAAM,UAAU,KAAK,CAAC;IACjC,QAAQ;IACR,mBAAmB;IACnB,oBAAoB;IACpB,2BAA2B;IAC3B,cAAc,QAAQ,GAAG,CAAC,YAAY;IACtC,cAAc,QAAQ,GAAG,CAAC,YAAY;IACtC,iBAAiB,QAAQ,GAAG,CAAC,eAAe;IAC5C,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAC1C,YAAY,QAAQ,GAAG,CAAC,UAAU;IAClC,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAC1C,0BAA0B,QAAQ,GAAG,CAAC,wBAAwB;IAC9D,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;IAChD,yBAAyB,QAAQ,GAAG,CAAC,uBAAuB;IAC5D,WAAW,QAAQ,GAAG,CAAC,SAAS;IAChC,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAC1C,YAAY,QAAQ,GAAG,CAAC,UAAU;IAClC,+BAA+B,QAAQ,GAAG,CAAC,6BAA6B;IACxE,sBAAsB;IACtB,4BAA4B;IAC5B,iCAAiC;AACnC"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/security/rate-limit.ts"],"sourcesContent":["import { env } from '@/lib/env';\n\n/**\n * In-Memory Rate Limiter (Development)\n * For production, use Redis with ioredis\n *\n * Enterprise Rate Limiting:\n * - 1000 requests per minute per user (configurable)\n * - Sliding window algorithm\n * - Distributed across multiple instances using Redis\n */\n\ninterface RateLimitStore {\n  count: number;\n  resetTime: number;\n}\n\n// In-memory store for development\nconst rateLimitStore = new Map<string, RateLimitStore>();\n\n/**\n * Rate Limiter Implementation\n * @param identifier - Unique identifier (IP + path or user ID)\n * @throws {Error} If rate limit is exceeded\n */\nexport async function rateLimit(identifier: string): Promise<void> {\n  const now = Date.now();\n  const windowMs = env.RATE_LIMIT_WINDOW; // 60000ms = 1 minute\n  const maxRequests = env.RATE_LIMIT_MAX_REQUESTS; // 1000 requests\n\n  // Get or create rate limit entry\n  let entry = rateLimitStore.get(identifier);\n\n  // Reset if window has passed\n  if (!entry || now > entry.resetTime) {\n    entry = {\n      count: 1,\n      resetTime: now + windowMs,\n    };\n    rateLimitStore.set(identifier, entry);\n    return;\n  }\n\n  // Increment request count\n  entry.count += 1;\n\n  // Check if limit exceeded\n  if (entry.count > maxRequests) {\n    throw new Error('Rate limit exceeded');\n  }\n\n  // Cleanup old entries periodically (every 10 minutes)\n  if (Math.random() < 0.01) {\n    cleanupOldEntries();\n  }\n}\n\n/**\n * Cleanup expired rate limit entries\n */\nfunction cleanupOldEntries(): void {\n  const now = Date.now();\n  for (const [key, entry] of rateLimitStore.entries()) {\n    if (now > entry.resetTime) {\n      rateLimitStore.delete(key);\n    }\n  }\n}\n\n/**\n * Get rate limit info for a specific identifier\n * @param identifier - Unique identifier\n * @returns Rate limit information\n */\nexport function getRateLimitInfo(identifier: string): {\n  remaining: number;\n  limit: number;\n  reset: Date;\n} {\n  const entry = rateLimitStore.get(identifier);\n  const maxRequests = env.RATE_LIMIT_MAX_REQUESTS;\n\n  if (!entry) {\n    return {\n      remaining: maxRequests,\n      limit: maxRequests,\n      reset: new Date(Date.now() + env.RATE_LIMIT_WINDOW),\n    };\n  }\n\n  return {\n    remaining: Math.max(0, maxRequests - entry.count),\n    limit: maxRequests,\n    reset: new Date(entry.resetTime),\n  };\n}\n\n/**\n * Redis-based Rate Limiter (Production)\n * Uncomment and configure when using Redis\n */\n/*\nimport Redis from 'ioredis';\n\nconst redis = new Redis(env.REDIS_URL, {\n  password: env.REDIS_PASSWORD,\n  lazyConnect: true,\n  maxRetriesPerRequest: 3,\n});\n\nexport async function rateLimitRedis(identifier: string): Promise<void> {\n  const key = `rate-limit:${identifier}`;\n  const now = Date.now();\n  const windowMs = env.RATE_LIMIT_WINDOW;\n  const maxRequests = env.RATE_LIMIT_MAX_REQUESTS;\n\n  // Use Redis pipeline for atomic operations\n  const pipeline = redis.pipeline();\n\n  // Remove expired entries\n  pipeline.zremrangebyscore(key, 0, now - windowMs);\n\n  // Count requests in current window\n  pipeline.zcard(key);\n\n  // Add current request\n  pipeline.zadd(key, now, `${now}-${Math.random()}`);\n\n  // Set expiry\n  pipeline.expire(key, Math.ceil(windowMs / 1000));\n\n  const results = await pipeline.exec();\n\n  if (!results) {\n    throw new Error('Redis pipeline failed');\n  }\n\n  const count = results[1][1] as number;\n\n  if (count >= maxRequests) {\n    throw new Error('Rate limit exceeded');\n  }\n}\n*/\n"],"names":[],"mappings":";;;;;;AAAA;;AAiBA,kCAAkC;AAClC,MAAM,iBAAiB,IAAI;AAOpB,eAAe,UAAU,UAAkB;IAChD,MAAM,MAAM,KAAK,GAAG;IACpB,MAAM,WAAW,yHAAG,CAAC,iBAAiB,EAAE,qBAAqB;IAC7D,MAAM,cAAc,yHAAG,CAAC,uBAAuB,EAAE,gBAAgB;IAEjE,iCAAiC;IACjC,IAAI,QAAQ,eAAe,GAAG,CAAC;IAE/B,6BAA6B;IAC7B,IAAI,CAAC,SAAS,MAAM,MAAM,SAAS,EAAE;QACnC,QAAQ;YACN,OAAO;YACP,WAAW,MAAM;QACnB;QACA,eAAe,GAAG,CAAC,YAAY;QAC/B;IACF;IAEA,0BAA0B;IAC1B,MAAM,KAAK,IAAI;IAEf,0BAA0B;IAC1B,IAAI,MAAM,KAAK,GAAG,aAAa;QAC7B,MAAM,IAAI,MAAM;IAClB;IAEA,sDAAsD;IACtD,IAAI,KAAK,MAAM,KAAK,MAAM;QACxB;IACF;AACF;AAEA;;CAEC,GACD,SAAS;IACP,MAAM,MAAM,KAAK,GAAG;IACpB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,eAAe,OAAO,GAAI;QACnD,IAAI,MAAM,MAAM,SAAS,EAAE;YACzB,eAAe,MAAM,CAAC;QACxB;IACF;AACF;AAOO,SAAS,iBAAiB,UAAkB;IAKjD,MAAM,QAAQ,eAAe,GAAG,CAAC;IACjC,MAAM,cAAc,yHAAG,CAAC,uBAAuB;IAE/C,IAAI,CAAC,OAAO;QACV,OAAO;YACL,WAAW;YACX,OAAO;YACP,OAAO,IAAI,KAAK,KAAK,GAAG,KAAK,yHAAG,CAAC,iBAAiB;QACpD;IACF;IAEA,OAAO;QACL,WAAW,KAAK,GAAG,CAAC,GAAG,cAAc,MAAM,KAAK;QAChD,OAAO;QACP,OAAO,IAAI,KAAK,MAAM,SAAS;IACjC;AACF,EAEA;;;CAGC,IACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { rateLimit } from '@/lib/security/rate-limit';\n\n/**\n * Enterprise-Grade Middleware\n * - Security headers (OWASP compliant)\n * - Rate limiting (1000 req/min per user)\n * - CSRF protection\n * - Request sanitization\n */\nexport async function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  // 1. Rate Limiting (Enterprise Scale)\n  const ip = request.headers.get('x-forwarded-for') ?? request.headers.get('x-real-ip') ?? 'anonymous';\n  const identifier = `${ip}-${request.nextUrl.pathname}`;\n\n  try {\n    await rateLimit(identifier);\n  } catch (error) {\n    return new NextResponse('Too Many Requests - Rate limit exceeded', {\n      status: 429,\n      headers: {\n        'Retry-After': '60',\n        'X-RateLimit-Limit': '1000',\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(Date.now() + 60000).toISOString(),\n      },\n    });\n  }\n\n  // 2. Security Headers (OWASP Best Practices)\n  response.headers.set('X-DNS-Prefetch-Control', 'on');\n  response.headers.set(\n    'Strict-Transport-Security',\n    'max-age=63072000; includeSubDomains; preload'\n  );\n  response.headers.set('X-Frame-Options', 'SAMEORIGIN');\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n\n  // 3. Content Security Policy\n  const cspHeader = [\n    \"default-src 'self'\",\n    \"script-src 'self' 'unsafe-eval' 'unsafe-inline'\",\n    \"style-src 'self' 'unsafe-inline'\",\n    \"img-src 'self' data: https:\",\n    \"font-src 'self' data:\",\n    \"connect-src 'self' https:\",\n    \"frame-ancestors 'self'\",\n    \"base-uri 'self'\",\n    \"form-action 'self'\",\n  ].join('; ');\n  response.headers.set('Content-Security-Policy', cspHeader);\n\n  // 4. Request ID for Distributed Tracing\n  const requestId = crypto.randomUUID();\n  response.headers.set('X-Request-ID', requestId);\n\n  // 5. API Response Time Tracking\n  const startTime = Date.now();\n  response.headers.set('X-Request-Start-Time', startTime.toString());\n\n  return response;\n}\n\n/**\n * Middleware Configuration\n * Apply to all routes except static files, images, and public assets\n */\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     * - sw.js, workbox (PWA service worker)\n     */\n    '/((?!_next/static|_next/image|favicon.ico|public|sw.js|workbox-.*\\\\.js).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;;;AASO,eAAe,WAAW,OAAoB;IACnD,MAAM,WAAW,gMAAY,CAAC,IAAI;IAElC,sCAAsC;IACtC,MAAM,KAAK,QAAQ,OAAO,CAAC,GAAG,CAAC,sBAAsB,QAAQ,OAAO,CAAC,GAAG,CAAC,gBAAgB;IACzF,MAAM,aAAa,GAAG,GAAG,CAAC,EAAE,QAAQ,OAAO,CAAC,QAAQ,EAAE;IAEtD,IAAI;QACF,MAAM,IAAA,qJAAS,EAAC;IAClB,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,gMAAY,CAAC,2CAA2C;YACjE,QAAQ;YACR,SAAS;gBACP,eAAe;gBACf,qBAAqB;gBACrB,yBAAyB;gBACzB,qBAAqB,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,WAAW;YAC/D;QACF;IACF;IAEA,6CAA6C;IAC7C,SAAS,OAAO,CAAC,GAAG,CAAC,0BAA0B;IAC/C,SAAS,OAAO,CAAC,GAAG,CAClB,6BACA;IAEF,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACxC,SAAS,OAAO,CAAC,GAAG,CAAC,0BAA0B;IAC/C,SAAS,OAAO,CAAC,GAAG,CAAC,oBAAoB;IACzC,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACxC,SAAS,OAAO,CAAC,GAAG,CAAC,sBAAsB;IAE3C,6BAA6B;IAC7B,MAAM,YAAY;QAChB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD,CAAC,IAAI,CAAC;IACP,SAAS,OAAO,CAAC,GAAG,CAAC,2BAA2B;IAEhD,wCAAwC;IACxC,MAAM,YAAY,OAAO,UAAU;IACnC,SAAS,OAAO,CAAC,GAAG,CAAC,gBAAgB;IAErC,gCAAgC;IAChC,MAAM,YAAY,KAAK,GAAG;IAC1B,SAAS,OAAO,CAAC,GAAG,CAAC,wBAAwB,UAAU,QAAQ;IAE/D,OAAO;AACT;AAMO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}