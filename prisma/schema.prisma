// This is your Prisma schema file for RABHAN Solar Energy Platform
// Enterprise-grade schema optimized for 1M+ users
// Documentation: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================================================

enum UserRole {
  ADMIN        // Platform administrators
  VENDOR       // Solar equipment vendors
  INSTALLER    // Solar installation companies
  USER         // End users/homeowners
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum AuthProvider {
  CREDENTIALS
  GOOGLE
  GITHUB
  APPLE
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified DateTime?
  passwordHash  String?    // Nullable for OAuth users
  firstName     String?
  lastName      String?
  phone         String?
  avatar        String?
  role          UserRole   @default(USER)
  status        UserStatus @default(PENDING_VERIFICATION)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  addresses     Address[]
  projects      Project[]
  orders        Order[]
  reviews       Review[]
  notifications Notification[]
  auditLogs     AuditLog[]

  @@index([email])
  @@index([role, status])
  @@index([createdAt])
  @@map("users")
}

model Account {
  id                String       @id @default(cuid())
  userId            String
  type              String       // oauth, credentials
  provider          AuthProvider
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  type       String   // email_verification, password_reset, mfa

  @@unique([identifier, token])
  @@index([expires])
  @@map("verification_tokens")
}

model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?
  company          String?
  website          String?
  location         String?
  timezone         String?  @default("Asia/Riyadh")
  language         String?  @default("en") // en, ar
  currency         String?  @default("SAR")

  // Solar-specific preferences
  roofType         String?  // flat, sloped, metal, tile
  roofArea         Float?   // in square meters
  monthlyBill      Float?   // average monthly electricity bill
  energyGoal       String?  // reduce_bills, energy_independence, sustainability

  // Notification preferences
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  pushNotifications  Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_profiles")
}

// ============================================================================
// LOCATION & ADDRESS MANAGEMENT
// ============================================================================

enum AddressType {
  HOME
  BUSINESS
  INSTALLATION_SITE
}

model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType @default(HOME)

  // Address fields
  street       String
  city         String
  state        String
  country      String      @default("Saudi Arabia")
  postalCode   String?

  // Geolocation for solar calculations
  latitude     Float?
  longitude    Float?

  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]

  @@index([userId])
  @@index([city, state])
  @@map("addresses")
}

// ============================================================================
// SOLAR PROJECT MANAGEMENT
// ============================================================================

enum ProjectStatus {
  DRAFT
  QUOTE_REQUESTED
  QUOTE_RECEIVED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  HYBRID
}

model Project {
  id          String        @id @default(cuid())
  userId      String
  addressId   String

  name        String
  description String?
  type        ProjectType   @default(RESIDENTIAL)
  status      ProjectStatus @default(DRAFT)

  // Solar system specifications
  systemSize       Float?    // in kW
  panelCount       Int?
  estimatedOutput  Float?    // kWh per year
  estimatedSavings Float?    // SAR per year
  estimatedCost    Float?    // SAR

  // Installation details
  installationDate DateTime?
  completionDate   DateTime?
  warrantyYears    Int?      @default(25)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        Address             @relation(fields: [addressId], references: [id])
  quotes         Quote[]
  projectItems   ProjectItem[]
  energyData     EnergyProduction[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("projects")
}

model ProjectItem {
  id         String  @id @default(cuid())
  projectId  String
  productId  String

  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([projectId])
  @@index([productId])
  @@map("project_items")
}

// ============================================================================
// PRODUCT CATALOG (Solar Equipment)
// ============================================================================

enum ProductCategory {
  SOLAR_PANEL
  INVERTER
  BATTERY
  MOUNTING
  MONITORING
  ACCESSORIES
}

enum ProductStatus {
  ACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

model Product {
  id          String          @id @default(cuid())
  vendorId    String?

  name        String
  description String?
  category    ProductCategory
  status      ProductStatus   @default(ACTIVE)

  // Product specifications
  brand       String
  model       String
  sku         String          @unique

  // Pricing
  price       Float
  salePrice   Float?
  currency    String          @default("SAR")

  // Solar-specific specs (stored as JSON for flexibility)
  specifications String?      // JSON: {wattage: 450, efficiency: 21.5, warranty: 25}

  // Inventory
  stock       Int             @default(0)
  minStock    Int             @default(10)

  // SEO & Images
  images      String?         // JSON array of image URLs
  thumbnail   String?
  tags        String?         // JSON array of tags

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  vendor       User?           @relation(fields: [vendorId], references: [id])
  projectItems ProjectItem[]
  orderItems   OrderItem[]
  reviews      Review[]

  @@index([category, status])
  @@index([vendorId])
  @@index([brand])
  @@map("products")
}

// ============================================================================
// QUOTES & ORDERS
// ============================================================================

enum QuoteStatus {
  PENDING
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

model Quote {
  id        String      @id @default(cuid())
  projectId String
  vendorId  String

  status    QuoteStatus @default(PENDING)

  // Quote details
  subtotal     Float
  taxAmount    Float
  discountAmount Float @default(0)
  totalAmount  Float

  notes        String?
  validUntil   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  vendor  User    @relation(fields: [vendorId], references: [id])

  @@index([projectId])
  @@index([vendorId, status])
  @@map("quotes")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_PAID
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  TAMARA        // Saudi BNPL
  TABBY         // Saudi BNPL
  CASH_ON_DELIVERY
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  orderNumber   String        @unique

  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @default(CREDIT_CARD)

  // Amounts
  subtotal      Float
  taxAmount     Float
  shippingCost  Float         @default(0)
  discountAmount Float        @default(0)
  totalAmount   Float

  // Shipping
  shippingAddress String?     // JSON
  trackingNumber  String?

  // Payment
  paymentId     String?       // External payment provider ID
  paidAt        DateTime?

  notes         String?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  productId  String

  quantity   Int
  unitPrice  Float
  totalPrice Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// ============================================================================
// ENERGY MONITORING & ANALYTICS
// ============================================================================

model EnergyProduction {
  id        String   @id @default(cuid())
  projectId String

  date      DateTime

  // Production metrics (kWh)
  production      Float
  consumption     Float?
  gridExport      Float?
  gridImport      Float?

  // Financial metrics (SAR)
  savings         Float?
  revenue         Float?

  // Environmental impact
  co2Offset       Float?  // kg of CO2

  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, date])
  @@index([projectId])
  @@index([date])
  @@map("energy_production")
}

// ============================================================================
// REVIEWS & RATINGS
// ============================================================================

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String

  rating    Int      // 1-5 stars
  title     String?
  comment   String?

  // Verification
  isVerified Boolean @default(false)

  // Moderation
  isPublished Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

enum NotificationType {
  SYSTEM
  ORDER_UPDATE
  PROJECT_UPDATE
  QUOTE_RECEIVED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  ENERGY_REPORT
  PROMOTION
}

model Notification {
  id      String           @id @default(cuid())
  userId  String

  type    NotificationType
  title   String
  message String
  link    String?

  isRead  Boolean          @default(false)

  createdAt DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// ============================================================================
// AUDIT LOGS (Enterprise Security & Compliance)
// ============================================================================

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  PERMISSION_CHANGE
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?

  action      AuditAction
  entity      String      // User, Product, Order, etc.
  entityId    String?

  // Request context
  ipAddress   String?
  userAgent   String?

  // Data changes (stored as JSON)
  oldValues   String?     // JSON
  newValues   String?     // JSON

  metadata    String?     // JSON for additional context

  createdAt   DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String // JSON value

  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_config")
}
